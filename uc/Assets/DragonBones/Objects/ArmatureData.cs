// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using Com.Viperstudio.Utils;
using System.Collections.Generic;
namespace DragonBones.Objects
{
	public class ArmatureData
	{
		public string Name;
		
		private List<BoneData> _boneDataList;
		public List<BoneData> BoneDataList
		{
			get { return _boneDataList; }
		}
		
		private List<SkinData> _skinDataList;
		public List<SkinData> SkinDataList
		{
			get { return _skinDataList; }
		}
		
		private List<AnimationData> _animationDataList;
		public List<AnimationData> AnimationDataList
		{
			get { return _animationDataList; }
		}
		
		public ArmatureData()
		{
			_boneDataList = new List<BoneData>();
			_skinDataList = new List<SkinData>();
			_animationDataList = new List<AnimationData>();
		}
		
		public void Dispose()
		{
			int i = _boneDataList.Count;
			while(i -- >0)
			{
				_boneDataList[i].Dispose();
			}
			i = _skinDataList.Count;
			while(i -- >0)
			{
				_skinDataList[i].Dispose();
			}
			i = _animationDataList.Count;
			while(i -- >0)
			{
				_animationDataList[i].Dispose();
			}

			_boneDataList.Clear ();
			_skinDataList.Clear ();
			_animationDataList.Clear ();
			_boneDataList.Clear ();
			_skinDataList.Clear ();
			_animationDataList.Clear ();
		}
		
		public BoneData GetBoneData(string boneName)
		{
			int i = _boneDataList.Count;
			while(i -- >0)
			{
				if(_boneDataList[i].Name == boneName)
				{
					return _boneDataList[i];
				}
			}
			return null;
		}
		
		public SkinData GetSkinData(string skinName)
		{
			if(skinName==null)
			{
				return _skinDataList[0];
			}
			int i = _skinDataList.Count;
			while(i -- >0)
			{
				if(_skinDataList[i].Name == skinName)
				{
					return _skinDataList[i];
				}
			}
			
			return null;
		}
		
		public AnimationData GetAnimationData(string animationName)
		{
			int i = _animationDataList.Count;
			while(i -- >0)
			{
				if(_animationDataList[i].Name == animationName)
				{
					return _animationDataList[i];
				}
			}
			return null;
		}
		
		public void AddBoneData(BoneData boneData)
		{
			if(boneData == null)
			{
				throw new ArgumentException();
			}
			
			if (_boneDataList.IndexOf(boneData) < 0)
			{
				_boneDataList.Add(boneData);
				//Logger.Log (boneData.Name + " " +  boneData.Transform.X + " " + boneData.Transform.Y);
			}
			else
			{
				throw new ArgumentException();
			}
		}
		
		public void AddSkinData(SkinData skinData)
		{
			if(skinData == null)
			{
				throw new ArgumentException();
			}
			
			if(_skinDataList.IndexOf(skinData) < 0)
			{
				_skinDataList.Add(skinData);
			}
			else
			{
				throw new ArgumentException();
			}
		}
		
		public void AddAnimationData(AnimationData animationData)
		{
			if(animationData == null)
			{
				throw new ArgumentException();
			}
			
			if(_animationDataList.IndexOf(animationData) < 0)
			{
				_animationDataList.Add(animationData);

			}
		}
		
		public void SortBoneDataList()
		{
			int i = _boneDataList.Count;
			if(i == 0)
			{
				return;
			}
			
			List<HelpObject> helpArray = new List<HelpObject>();
			while(i -- >0)
			{
				BoneData boneData = _boneDataList[i];
				int level = 0;
				BoneData parentData = boneData;
				while(parentData!=null && parentData.Parent!=null)
				{
					level ++;
					parentData = GetBoneData(parentData.Parent);
				}
				helpArray.Insert(0, new HelpObject() {Level = level, BoneData = boneData});
			}
			
			//helpArray.sortOn("level", Array.NUMERIC);

			helpArray.Sort(delegate(HelpObject x, HelpObject y)
			                {
				if (x.Level > y.Level) return 1;
				else if(x.Level == y.Level) return 0;
				else return -1;
			});
			
			i = helpArray.Count;
			while(i -- >0)
			{
				_boneDataList[i] = helpArray[i].BoneData;
			}
		}
	}

	public class HelpObject {
		public int Level;
		public BoneData BoneData;
		
	}

}

