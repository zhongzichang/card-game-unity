// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Com.Viperstudio.Utils;
using Com.Viperstudio.Geom;

namespace DragonBones.Objects
{
	public class SkeletonData
	{
		public string Name;
		
		private Dictionary<string, Point> _subTexturePivots;
		
 		public List<String> armatureNames
		{
			get {
				List<String> nameList = new List<String>();
				foreach(ArmatureData armatureData in _armatureDataList)
				{
					nameList[nameList.Count] = armatureData.Name;
				}
				return nameList;
			}
		}
		
		private List<ArmatureData> _armatureDataList;
		public List<ArmatureData> armatureDataList
		{
			get { return _armatureDataList; }
		}
		
		public SkeletonData()
		{
			_armatureDataList = new List<ArmatureData>();
			_subTexturePivots = new Dictionary<string, Point>();
		}
		
		public void Dispose()
		{
			foreach(ArmatureData armatureData in _armatureDataList)
			{
				armatureData.Dispose();
			}

			_armatureDataList.Clear ();
			
			_armatureDataList = null;
			_subTexturePivots = null;
		}
		
		public ArmatureData GetArmatureData(string armatureName)
		{
			int i = _armatureDataList.Count;
			while(i -- >0)
			{
				if(_armatureDataList[i].Name == armatureName)
				{
					return _armatureDataList[i];
				}
			}
			
			return null;
		}
		
		public void AddArmatureData(ArmatureData armatureData)
		{
			if(armatureData == null)
			{
				throw new ArgumentException();
			}
			
			if(_armatureDataList.IndexOf(armatureData) < 0)
			{
				_armatureDataList.Add(armatureData);
			}
			else
			{
				throw new ArgumentException();
			}
		}
		
		public void RemoveArmatureData(ArmatureData armatureData)
		{
			int index = _armatureDataList.IndexOf(armatureData);
			if(index >= 0)
			{
				_armatureDataList.RemoveAt(index);
			}
		}
		
		public void RemoveArmatureDataByName(string armatureName)
		{
			int i = _armatureDataList.Count;
			while(i -- >0)
			{
				if(_armatureDataList[i].Name == armatureName)
				{
					_armatureDataList.RemoveAt(i);
				}
			}
		}
		
		public Point GetSubTexturePivot(string subTextureName)
		{
			return _subTexturePivots[subTextureName];
		}

		public Point AddSubTexturePivot(float x, float y, string subTextureName)
		{
			Point point = new Point(x, y);
			if (_subTexturePivots.ContainsKey (subTextureName)) {
				if(_subTexturePivots [subTextureName] == null)
				{
					_subTexturePivots [subTextureName] = new Point();
				}
					_subTexturePivots [subTextureName].X = x;
				   _subTexturePivots [subTextureName].Y = y;
			} 
			else 
			{
				_subTexturePivots.Add(subTextureName, point);
			}
				
			return point;
		}
		
		public void RemoveSubTexturePivot(string subTextureName)
		{
			if(subTextureName!=null)
			{
				 _subTexturePivots.Remove(subTextureName);
			}
			else
			{
				foreach(KeyValuePair<string, Point> subTexture in _subTexturePivots)
				{
					_subTexturePivots.Remove(subTexture.Key);
				}
			}
		}
	}
}

