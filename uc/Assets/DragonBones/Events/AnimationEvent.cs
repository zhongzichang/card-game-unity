// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using DragonBones.Animation;
using Com.Viperstudio.Events;
namespace DragonBones.Events
{
	public class AnimationEvent :Event
	{
		/**
		 * Dispatched when the playback of an animation fade in.
		 */
		public static string MOVEMENT_CHANGE
		{
			
			get { return FADE_IN; }
			
		}
		
		/**
		 * Dispatched when the playback of an animation fade in.
		 */
		public const string FADE_IN = "fadeIn";
		
		/**
		 * Dispatched when the playback of an animation fade out.
		 */
		public const string FADE_OUT = "fadeOut";
		
		/**
		 * Dispatched when the playback of an animation starts.
		 */
		public const string START = "start";
		
		/**
		 * Dispatched when the playback of a animation stops.
		 */
		public const string COMPLETE = "complete";
		
		/**
		 * Dispatched when the playback of a animation completes a loop.
		 */
		public const string LOOP_COMPLETE = "loopComplete";
		
		/**
		 * Dispatched when the playback of an animation fade in complete.
		 */

		public const string FADE_IN_COMPLETE = "fadeInComplete";
		
		/**
		 * Dispatched when the playback of an animation fade out complete.
		 */
		public const string FADE_OUT_COMPLETE = "fadeOutComplete";
		
		/**
		 * The animationState instance.
		 */
		public AnimationState AnimationState;
		
		/**
		 * The armature that is the taget of this event.
		 */
		public Armature Armature
		{
			get { return Target as Armature; }
		}
		
		public string MovementID
		{
			get { return AnimationState.Name; }
		}
		
		/**
		 * Creates a new AnimationEvent instance.
		 * @param	type
		 * @param	cancelable
		 */
		public AnimationEvent(string type) :base(type)
		{

		}
		
		/**
		 * @private
		 * @return
		 */
		override public Event clone()
		{
			AnimationEvent evt = new AnimationEvent(this.EventType);
			evt.AnimationState = AnimationState;
			return evt;
		}
	}
}

