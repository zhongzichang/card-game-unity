// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using DragonBones.Events;
using DragonBones.Core;
using DragonBones.Animation;
using DragonBones.Objects;
using DragonBones.Display;
using Com.Viperstudio.Geom;

namespace DragonBones
{
	public class Bone :DBObject
	{

		private static SoundEventManager  _soundManager = SoundEventManager.Instance;
		//0/1/2
		public int ScaleMode;
		
		/** @private */
		public Point _tweenPivot;
		
		private List<DBObject> _children;
		
		private Slot _slot;
		/**
		 * The default Slot of this Bone instance.
		 */
		public Slot Slot
		{
			get { return _slot; }
		}
		
		/**
		 * The sub-armature of default Slot of this Bone instance.
		 */
		public Armature ChildArmature
		{
			get { return _slot!=null ? _slot.ChildArmature : null; } 
		}

		/**
		 * The DisplayObject of default Slot of this Bone instance.
		 */
		public Object Display
		{
			get { return _slot!=null ? _slot.Display : null; }
			set {
				if(_slot!=null)
				 {
					_slot.Display = value;
				 }
				}
		}

		
		public string DisplayController;
		
		/**
		 * @inheritDoc
		 */
		override public Boolean Visible
		{
			set {
				if(this._visible != value)
				{
					this._visible = value;
					int i = _children.Count;
					while(i -- >0)
					{
						DBObject child = _children[i];
						if(child is Slot)
						{
							(child as Slot).updateVisible(this._visible);
						}
					}
				}
			}
		}
		
		/** @private */
		override public void setArmature(Armature value)
		{
			base.setArmature(value);
			int i = _children.Count;
			while(i -- >0)
			{
				_children[i].setArmature(this._armature);
			}
		}
		
		public Bone()
		{
			_children = new List<DBObject>();
			_scaleType = 2;
			
			_tweenPivot = new Point();

			ScaleMode = 1;
		}
		
		/**
		 * @inheritDoc
		 */
		override public void Dispose()
		{
			if(_children == null)
			{
				return;
			}
			base.Dispose();
			
			int i = _children.Count;
			while(i -- >0)
			{
				_children[i].Dispose();
			}
			//_children.fixed = false;
			_children.Clear();
			
			_children = null;
			_slot = null;
			_tweenPivot = null;
		}
		
		public bool Contains(DBObject child)
		{
			if(child == null)
			{
				throw new ArgumentException();
			}
			if(child == this)
			{
				return false;
			}
			DBObject ancestor = child;
			while (!(ancestor == this || ancestor == null))
			{
				ancestor = ancestor.Parent;
			}
			return ancestor == this;
		}
		
		public void AddChild(DBObject child)
		{
			if(child == null)
			{
				throw new ArgumentException();
			}
			
			if(child == this || (child is Bone && (child as Bone).Contains(this)))
			{
				throw new ArgumentException("An Bone cannot be added as a child to itself or one of its children (or children's children, etc.)");
			}
			
			if(child.Parent!=null)
			{
				child.Parent.RemoveChild(child);
			}
			//_children.fixed = false;
			_children.Add(child);
			//_children.fixed = true;
			child.setParent(this);
			child.setArmature(this._armature);
			
			if(_slot==null && child is Slot)
			{
				_slot = child as Slot;
			}
		}
		
		public void RemoveChild(DBObject child)
		{
			if(child==null)
			{
				throw new ArgumentException();
			}
			
			int index = _children.IndexOf(child);
			if (index >= 0)
			{
				//_children.fixed = false;
				_children.RemoveAt(index);
				//_children.fixed = true;
				child.setParent(null);
				child.setArmature(null);
				
				if(child == _slot)
				{
					_slot = null;
				}
			}
			else
			{
				throw new ArgumentException();
			}
		}
		
		/**
		 * Get all Slot instance associated with this bone.
		 * @return A Vector.&lt;Slot&gt; instance.
		 * @see dragonBones.Slot
		 */
		public List<Slot> GetSlots()
		{
			List<Slot> slotList = new List<Slot>();
			int i = _children.Count;
			while(i -- >0)
			{
				if(_children[i] is Slot)
				{
					slotList.Insert(0, _children[i] as Slot);
				}
			}
			return slotList;
		}
		
		/** @private */
		public void arriveAtFrame(Frame frame, TimelineState timelineState, AnimationState animationState, bool isCross)
		{
			if(frame!=null)
			{
				int mixingType = animationState.GetMixingTransform(Name);
				if(animationState.DisplayControl && (mixingType == 2 || mixingType == -1))
				{
					if(
						DisplayController==null || DisplayController == animationState.Name
						)
					{
						TransformFrame tansformFrame = frame as TransformFrame;
						if(_slot!=null)
						{
							int displayIndex = tansformFrame.DisplayIndex;
							if(displayIndex >= 0)
							{
								if(!float.IsNaN(tansformFrame.ZOrder) && tansformFrame.ZOrder != _slot._tweenZorder)
								{
									_slot._tweenZorder = tansformFrame.ZOrder;
									this._armature._slotsZOrderChanged = true;
								}
							}
							_slot.changeDisplay(displayIndex);
							_slot.updateVisible(tansformFrame.Visible);
						}
					}
				}
				
				if(frame.Evt!=null && this._armature.HasEventListener(FrameEvent.BONE_FRAME_EVENT))
				{
					FrameEvent frameEvent = new FrameEvent(FrameEvent.BONE_FRAME_EVENT);
					frameEvent.Bone = this;
					frameEvent.AnimationState = animationState;
					frameEvent.FrameLabel = frame.Evt;
					this._armature._eventList.Add(frameEvent);
				}
				
				if(frame.Sound!=null && _soundManager.HasEventListener(SoundEvent.SOUND))
				{
					SoundEvent soundEvent = new SoundEvent(SoundEvent.SOUND);
					soundEvent.Armature = this._armature;
					soundEvent.AnimationState = animationState;
					soundEvent.Sound = frame.Sound;
					_soundManager.DispatchEvent(soundEvent);
				}
				
				if(frame.Action!=null)
				{
					foreach(DBObject child in _children)
					{
						if(child is Slot)
						{
							Armature childArmature = (child as Slot).ChildArmature;
							if(childArmature!=null)
							{
								childArmature.Animation.GotoAndPlay(frame.Action);
							}
						}
					}
				}
			}
			else
			{
				if(_slot!=null)
				{
					_slot.changeDisplay(-1);
				}
			}
		}
		
		/** @private */
		public void updateColor(
			float aOffset, 
			float rOffset, 
			float gOffset, 
			float bOffset, 
			float aMultiplier, 
			float rMultiplier, 
			float gMultiplier, 
			float bMultiplier,
			bool isColorChanged
		)
		{
			if(isColorChanged || _isColorChanged)
			{
				_slot._displayBridge.UpdateColor(
					aOffset, 
					rOffset, 
					gOffset, 
					bOffset, 
					aMultiplier, 
					rMultiplier, 
					gMultiplier, 
					bMultiplier
					);
			}
			_isColorChanged = isColorChanged;
		}


	}
}

