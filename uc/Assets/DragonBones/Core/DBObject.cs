// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using Com.Viperstudio.Utils;
using DragonBones.Objects;
using Com.Viperstudio.Geom;

namespace DragonBones.Core
{
	public class DBObject
	{
		/**
		 * The name of this DBObject instance's Armature instance.
		 */
		public string Name;
		
		/**
		 * An object that can contain any user extra data.
		 */
		public Object UserData;
		
		/**
		 * 
		 */
		public bool FixedRotation;
		
		/** @private */
		public Com.Viperstudio.Geom.Matrix _globalTransformMatrix;
		/** @private */
		protected int _scaleType;
		/** @private */
		public bool _isColorChanged;
		
		/** @private */
		public DBTransform _global;
		/**
		 * This DBObject instance global transform instance.
		 * @see dragonBones.objects.DBTransform
		 */
		public DBTransform Global
		{
			get { return _global; }
		}
		
		/** @private */
		protected DBTransform _origin;
		/**
		 * This DBObject instance origin transform instance.
		 * @see dragonBones.objects.DBTransform
		 */
		public DBTransform Origin
		{
			get { return _origin; }
		}
		
		/** @private */
		protected DBTransform _offset;
		/**
		 * This DBObject instance offset transform instance.
		 * @see dragonBones.objects.DBTransform
		 */
		public DBTransform Offset
		{
			get { return _offset; }
		}
		public DBTransform Node
		{
			get { return _offset; }
		}
		
		/** @private */
		public DBTransform _tween;
		
		/** @private */
		protected bool _visible;

		public virtual bool Visible
		{
			get { return _visible; }
			set { _visible = value; }
		}

		
		/** @private */
		protected Bone _parent;
		
		/**
		 * Indicates the Bone instance that directly contains this DBObject instance if any.
		 */
		public Bone Parent
		{
			get { return _parent;  }
		}
		/** @private */
		public void setParent(Bone value)
		{
			_parent = value;
		}
		
		/** @private */
		protected Armature _armature;
		/**
		 * The armature this DBObject instance belongs to.
		 */
		public Armature Armature
		{
			get  { return _armature; }
		}
		/** @private */
		public virtual void setArmature(Armature value)
		{
			if(_armature!=null)
			{
				_armature.removeDBObject(this);
			}
			_armature = value;
			if(_armature!=null)
			{
				_armature.addDBObject(this);
			}
		}
		
		public DBObject()
		{
			_global = new DBTransform();
			_origin = new DBTransform();
			_offset = new DBTransform();
			_tween = new DBTransform();
			_tween.ScaleX = _tween.ScaleY = 0;
			
			_globalTransformMatrix = new Com.Viperstudio.Geom.Matrix();
			
			_visible = true;
		}
		
		/**
		 * Cleans up any resources used by this DBObject instance.
		 */
		public virtual void Dispose()
		{
			UserData = null;
			_parent = null;
			_armature = null;
			_global = null;
			_origin = null;
			_offset = null;
			_tween = null;
			_globalTransformMatrix = null;
		}
		
		/** @private */

		public virtual void update()
		{

			_global.ScaleX = (_origin.ScaleX + _tween.ScaleX) * _offset.ScaleX;
			_global.ScaleY = (_origin.ScaleY + _tween.ScaleY) * _offset.ScaleY;



			if(_parent!=null)
			{
				float x = _origin.X + _offset.X + _tween.X;
				float y = _origin.Y + _offset.Y + _tween.Y;


			
				Com.Viperstudio.Geom.Matrix parentMatrix = _parent._globalTransformMatrix;

				_globalTransformMatrix.Tx =  _global.X =  parentMatrix.A * x + parentMatrix.C * y + parentMatrix.Tx;

				_globalTransformMatrix.Ty = _global.Y =   parentMatrix.D * y + parentMatrix.B * x + parentMatrix.Ty;
		

				if(FixedRotation)
				{
					_global.SkewX = _origin.SkewX + _offset.SkewX + _tween.SkewX;
					_global.SkewY = _origin.SkewY + _offset.SkewY + _tween.SkewY;
				}
				else
				{
					_global.SkewX = _origin.SkewX + _offset.SkewX + _tween.SkewX + _parent._global.SkewX;
					_global.SkewY = _origin.SkewY + _offset.SkewY + _tween.SkewY + _parent._global.SkewY;

				}
				
				if(_parent.ScaleMode >= _scaleType)
				{
					_global.ScaleX *= _parent._global.ScaleX;
					_global.ScaleY *= _parent._global.ScaleY;
				}


			}
			else
			{

				_globalTransformMatrix.Tx = _global.X = _origin.X + _offset.X + _tween.X;
				_globalTransformMatrix.Ty = _global.Y = _origin.Y + _offset.Y + _tween.Y;
				//Logger.Log(this.Name + "  " +"  "  + _globalTransformMatrix.Tx + "  " +  _globalTransformMatrix.Ty);
				_global.SkewX = _origin.SkewX + _offset.SkewX + _tween.SkewX;
				_global.SkewY = _origin.SkewY + _offset.SkewY + _tween.SkewY;


			}

			_globalTransformMatrix.A = _global.ScaleX * (float)Math.Cos(_global.SkewY);
			_globalTransformMatrix.B = _global.ScaleX * (float)Math.Sin(_global.SkewY);
			_globalTransformMatrix.C = -_global.ScaleY * (float)Math.Sin(_global.SkewX);
			_globalTransformMatrix.D = _global.ScaleY * (float)Math.Cos(_global.SkewX);

		}
	}
}

