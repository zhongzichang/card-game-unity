// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Com.Viperstudio.Utils;

namespace DragonBones.Animation
{
	public class WorldClock : IAnimatable
	{
		public static WorldClock Clock = new WorldClock();
		
		private List<IAnimatable> _animatableList;		
		private float _time;
		
		/**
		 * @private
		 */
		public float Time
		{
			get { return _time; }
		}
		
		private float _timeScale = 1f;
		/**
		 * The time scale to apply to the number of second passed to the advanceTime() method.
		 * @param A Number to use as a time scale (NaN or < 0 to disable).
		 */
		/**
		 * @private
		 */
		public float timeScale
		{
			get { return _timeScale;}
			set {
					if (value < 0 || float.IsNaN(value))
					{
						value = 0;
					}
					_timeScale = value;   
				}
		}

	
		/**
		 * Creates a new WorldClock instance. (use the static var WorldClock.clock instead).
		 */
		public WorldClock()
		{
			_time = (float)DateTime.Now.Millisecond * 0.001f;
			_animatableList = new List<IAnimatable>();

		}
		
		/** 
		 * Returns true if the IAnimatable instance is contained by WorldClock instance.
		 * @param	An IAnimatable instance (Armature or custom)
		 * @return true if the IAnimatable instance is contained by WorldClock instance.
		 */
		public bool Contains(IAnimatable animatable)
		{
			return _animatableList.IndexOf(animatable) >= 0;
		}
		/**
		 * Add a IAnimatable instance (Armature or custom) to this WorldClock instance.
		 * @param	An IAnimatable instance (Armature, WorldClock or custom)
		 */
		public void Add(IAnimatable animatable)
		{
			if (animatable!=null && _animatableList.IndexOf(animatable) == -1)
			{
				_animatableList.Add(animatable);
			}
		}
		/**
		 * Remove a IAnimatable instance (Armature or custom) from this WorldClock instance.
		 * @param	An IAnimatable instance (Armature or custom)
		 */
		public void Remove(IAnimatable animatable)
		{
			int index = _animatableList.IndexOf(animatable);
			if (index >= 0)
			{
				_animatableList.RemoveAt(index);
			}
		}
		/**
		 * Remove all IAnimatable instance (Armature or custom) from this WorldClock instance.
		 *
		 */
		public void Clear()
		{
			_animatableList.Clear();
		}
		/**
		 * Update all registered IAnimatable instance animations using this method typically in an ENTERFRAME Event or with a Timer.
		 * @param	The amount of second to move the playhead ahead.
		 */
		public void AdvanceTime(float passedTime)
		{
			
			if(passedTime < 0)
			{
				float currentTime = (float)DateTime.Now.Millisecond * 0.001f;
				passedTime = currentTime;// - _time;
				_time = currentTime;

			}
			
			passedTime *= _timeScale;
			
			int length = _animatableList.Count;
			if(length == 0)
			{
				return;
			}
			int currentIndex = 0;
			int i = 0;
			for(i = 0;i < length;i ++)
			{
				IAnimatable animatable = _animatableList[i];
				if(animatable!=null)
				{
					if(currentIndex != i)
					{
						_animatableList[currentIndex] = animatable;
						_animatableList[i] = null;
					}
					animatable.AdvanceTime(passedTime);
					currentIndex ++;
				}
			}

			if (currentIndex != i)
			{
				length = _animatableList.Count;
				while(i < length)
				{
					_animatableList[currentIndex ++] = _animatableList[i ++];
				}
				_animatableList.RemoveRange(currentIndex, length - currentIndex);
			}

		}
		
	}
}

