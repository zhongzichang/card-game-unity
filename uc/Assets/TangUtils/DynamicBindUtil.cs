//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18408
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using System.Reflection;
/// <summary>
/// 此工具类用于动态给gameobject绑定脚本组件，以及将脚本中的变量名和子控件做出绑定
/// 
/// 优点：1.策划就可以不用在编辑器里面手动拖放进行绑定，因为手动拖放出错几率较高
/// 		 2.当界面发生变化时，只要元件和元件名不变，不需要重新编译程序
/// 		 3.避免拼接界面时环境和程序运行环境不一致导致的脚本丢失问题
/// 
/// 缺点：1.需要和策划做出约定，即prfabs名字和脚本类名保持一致，下面子元件和变量命名保持一致
///			 2.需要进行绑定的变量需要申明为public,不需要绑定的变量定义成private,如外部需要访问私有变量的话，通过get函数来获取
/// 		 3.使用反射机制有一定性能影响
/// 综述： 为了增加容错率和加快开发进度，可以采用这个命名约定来规避风险，另外性能影响太大，可以再考虑其它方式，
/// create by huxiaobo
/// 2013.12.5
/// 
/// </summary>
public class DynamicBindUtil
{
	public DynamicBindUtil ()
	{
	}
	/// <summary>
	/// 绑定脚本和public属性的变量
	/// </summary>
	/// <returns>The script and property.</returns>
	/// <param name="obj">Gameobject类型，通常是prefabs实例化产生的对象</param>
	/// <param name="scriptName">脚本名字，在外部是获取的脚本的类名</param>
	public static MonoBehaviour BindScriptAndProperty(GameObject obj, string scriptName)
	{
		//首先将脚本和GameObject绑定
		MonoBehaviour script = obj.AddComponent(scriptName) as MonoBehaviour;
		if (script == null)
		{
			Debug.LogError("bind " +scriptName + "faild");
			return null;
		}
		//动态进行组件和脚本变量的绑定
		FieldInfo[] infos = script.GetType().GetFields();
		//遍历每一个public变量字段
		foreach(FieldInfo ff in infos)
		{
			Transform[] tfs = obj.GetComponentsInChildren<Transform>(true);
			bool isFind = false;
			foreach (Transform tf in tfs)
			{
				if (ff.Name.Equals(tf.name))
				{
					isFind = true;
					ff.SetValue(script, tf.gameObject);
					break;
				}
			}
			if (isFind == false)
				Debug.LogWarning("the " + ff.Name + " is not found related components");						
		}
		return script;
	}
	/// <summary>
	/// 绑定toggle下面绑定的面板脚本和元件
	/// </summary>
	/// <param name="toggle">Toggle.</param>
	public static void BindToggleObjects(GameObject toggle)
	{
		UIToggledObjects uo = toggle.GetComponent<UIToggledObjects>();
		if (uo != null)
		{
		List<GameObject> ac = uo.activate;
			if (ac != null)
			{
				foreach (GameObject obj in ac)
				{
					BindScriptAndProperty(obj, obj.name);
				}
			}
		}

	}
}

