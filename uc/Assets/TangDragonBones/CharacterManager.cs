// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using DragonBones;
using DragonBones.Factorys;
using DragonBones.Animation;
using DragonBones.Objects;
using DragonBones.Display;
using DragonBones.Textures;
using System.Collections.Generic;
using Com.Viperstudio.Utils;
using UnityEngine;

namespace TangDragonBones
{
  public class CharacterManager : MonoBehaviour
  {
    public static event EventHandler RaiseLoadedEvent;

    private static Queue<string> requireQueue = new Queue<string> ();
    private UnityFactory factory = null;

    void Awake ()
    {
      //Application.targetFrameRate = 30;
      factory = new UnityFactory ();
    }
    // Update is called once per frame
    void Update ()
    {

      if (requireQueue.Count > 0) {

        string name = requireQueue.Dequeue ();

        Texture textureAssets = Cache.textureTable [name];
        CharacterData data = Cache.characterDataTable [name];

        // 确认数据和资源在缓存中
        if (textureAssets != null && data != null) {

          if (factory.GetSkeletonData (name) == null) {
            factory.AddSkeletonData (data.skeletonData, data.skeletonData.Name);
          }

          if (factory.GetTextureAtlas (name) == null) {
            factory.AddTextureAtlas (new TextureAtlas (textureAssets, data.atlasData));
          }

          Armature armature = factory.BuildArmature ("centaur/charactor", null, "charactor_all");
          armature.AdvanceTime (0f);
          WorldClock.Clock.Add (armature);
          //armature.Animation.GotoAndPlay ("run", -1, -1, 0);

          GameObject gobj = (armature.Display as UnityArmatureDisplay).Display as GameObject;
          gobj.transform.position = Vector3.zero;
          gobj.SetActive (false);
          Add (gobj);

        }
      }


      WorldClock.Clock.AdvanceTime (Time.deltaTime);
    }

    #region GameObject Methods

    /// <summary>
    /// 加载角色游戏对象
    /// </summary>
    /// <param name="name">Name.</param>
    public static void LazyLoad (string name)
    {

      if (Cache.gobjTable.ContainsKey (name)) {

        // 有了
        OnResReady (name);

      } else if (Config.use_packed_res) {

        // 从资源包下载
        string path = Tang.ResourceUtils.GetAbFilePath (name);
        Tang.AssetBundleLoader.LoadAsync (name, OnResLoaded);

      } else {

        // 本地读取
        ResourceLoad (name);
      }
    }

    private static void OnResLoaded (AssetBundle ab)
    {
      if (ab != null) {

        UnityEngine.Object assets = ab.Load (ab.name);

        if (assets != null) {
          GameObject gobj = GameObject.Instantiate (assets) as GameObject;
          gobj.SetActive (false);
          gobj.name = assets.name;
          Add (gobj);
          // 资源已准备完毕
          OnResReady (assets.name);
        }
      }

    }

    private static void ResourceLoad (string name)
    {

      Debug.Log ("ResourceLoad");

      string atlasFilepath = Config.DATA_PATH + Tang.Config.DIR_SEP + name + "_atlas.json";
      string textureFilepath = Config.DATA_PATH + Tang.Config.DIR_SEP + name + "_texture";
      string skeletonFilepath = Config.DATA_PATH + Tang.Config.DIR_SEP + name + "_skeleton.json";

      TextAsset atlasAssets = Resources.Load (atlasFilepath, typeof(TextAsset)) as TextAsset;
      Texture textureAssets = Resources.Load (textureFilepath, typeof(Texture)) as Texture;
      TextAsset skeletonAssets = Resources.Load (skeletonFilepath, typeof(TextAsset)) as TextAsset;

      if (atlasAssets != null && textureAssets != null && skeletonAssets != null) {

        Debug.Log ("resource load success");

        // 内容加载成功
        //read and parse skeleton josn into SkeletonData
        TextReader reader = new StringReader (skeletonAssets.text);
        Dictionary<string, System.Object> skeletonRawData = Json.Deserialize (reader) as Dictionary<string, System.Object>;
        SkeletonData skeletonData = ObjectDataParser.ParseSkeletonData (skeletonRawData);

        //read and parse texture atlas josn into TextureAtlas
        reader = new StringReader (atlasAssets.text);
        Dictionary<string, System.Object> atlasRawData = Json.Deserialize (reader) as Dictionary<string, System.Object>;
        AtlasData atlasData = AtlasDataParser.ParseAtlasData (atlasRawData);


        if (skeletonData != null && atlasData != null) {
          Cache.characterDataTable.Add (name, new CharacterData (skeletonData, atlasData));
        }

        Cache.textureTable.Add (name, textureAssets);

        // 将游戏对象创建请求放入队列中，在 Update 方法中完成创建
        requireQueue.Enqueue (name);

        // 发出通知
        OnResReady (name);
      }

    }

    private static void OnResReady (string name)
    {
      if (RaiseLoadedEvent != null)
        RaiseLoadedEvent (null, EventArgs.Empty);
    }

    /// <summary>
    /// 获取一个游戏对象－没有被使用的
    /// </summary>
    /// <param name="name">Name.</param>
    public static GameObject FetchUnused (string name)
    {

      if (Cache.gobjTable.ContainsKey (name)) {
        foreach (GameObject gobj in Cache.gobjTable[name]) {
          if (!gobj.activeSelf) {
            gobj.SetActive (true);
            return gobj;
          }
        }
      }

      return null;
    }

    /// <summary>
    /// Add the specified gobj.
    /// </summary>
    /// <param name="gobj">Gobj.</param>
    public static void Add (GameObject gobj)
    {
      if (Cache.gobjTable.ContainsKey (gobj.name)) {
        Cache.gobjTable [gobj.name].Add (gobj);
      } else {
        List<GameObject> list = new List<GameObject> ();
        list.Add (gobj);
        Cache.gobjTable.Add (gobj.name, list);
      }
    }

    /// <summary>
    /// 释放游戏对象所占用的资源
    /// </summary>
    /// <param name="gobj">Gobj.</param>
    /// <param name="all">If set to <c>true</c> all.</param>
    public static void Release (GameObject gobj, bool all)
    {
      string name = gobj.name;
      gobj.SetActive (false);
      if (all) {
        GameObject.Destroy (gobj);
        Cache.gobjTable.Remove (name);
        Tang.AssetBundleLoader.Unload (name, all);
      }
    }

    #endregion
  }
}

